<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20220122T102950Z" application="Evernote" version="10.24.3">
  <note>
    <title>Equals and Hash code Methods in java</title>
    <created>20210717T034001Z</created>
    <updated>20210717T071120Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><span style="color:rgb(24, 168, 65);">difference between == operator and equals() method. </span></div><div><span style="color:rgb(24, 168, 65);">    </span><span style="color:rgb(51, 51, 51);">equals() : belongs to Object class.  and compares the contents.</span></div><div><span style="color:rgb(51, 51, 51);">    == : operator compares the memory reference of the object. </span></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);">   </span><span style="color:rgb(39, 50, 57);">In general, both equals() and “==” operator in Java are used to compare objects to check equality    but here are some of the differences between the two:  </span></div><ol><li><div><span style="color:rgb(39, 50, 57);">The main difference between the .equals() method and == operator is that one is a method and the other is the operator.</span></div></li><li><div><span style="color:rgb(39, 50, 57);">We can use == operators for reference comparison (</span><b><span style="color:rgb(39, 50, 57);">address comparison</span></b><span style="color:rgb(39, 50, 57);">) and .equals() method for </span><b><span style="color:rgb(39, 50, 57);">content comparison</span></b><span style="color:rgb(39, 50, 57);">. In simple words, == checks if both objects point to the same memory location whereas .equals() evaluates to the comparison of values in the objects.</span></div></li><li><div><span style="color:rgb(39, 50, 57);">If a class does not </span><a href="https://www.geeksforgeeks.org/overriding-equals-method-in-java/" rev="en_rl_none"><span style="color:rgb(39, 50, 57);"><u>override the equals method</u></span></a><span style="color:rgb(39, 50, 57);">, then by default it uses the equals(Object o) method of the closest parent class that has overridden this method.  </span></div></li></ol><div><span style="color:rgb(39, 50, 57);"><span style="--en-markholder:true;"><br /></span></span></div><hr /><div><span style="color:rgb(39, 50, 57);"><s><span style="--en-markholder:true;"><br /></span></s></span></div><div><span style="color:rgb(24, 168, 65);">contract between equals() method and hashcode method</span>: </div><div>   <span style="color:rgb(0, 0, 0);">Objects that are equal (according to their </span><i><span style="color:rgb(0, 0, 0);">equals()</span></i><span style="color:rgb(0, 0, 0);">) must return the same hash code. </span><b><span style="color:rgb(0, 0, 0);">Different objects do not need to return different hash codes.</span></b></div><div style="text-align:start;">The general contract of <i>hashCode()</i> states:</div><div><br /></div><ul><li><div><span style="color:rgb(0, 0, 0);">Whenever it is invoked on the same object more than once during an execution of a Java application, </span><i><span style="color:rgb(0, 0, 0);">hashCode()</span></i><span style="color:rgb(0, 0, 0);"> must consistently return the same value, provided no information used in equals comparisons on the object is modified. This value doesn't need to stay consistent from one execution of an application to another execution of the same application.</span></div><div><span style="color:rgb(0, 0, 0);">If two objects are equal according to the </span><i><span style="color:rgb(0, 0, 0);">equals(Object)</span></i><span style="color:rgb(0, 0, 0);"> method, calling the </span><i><span style="color:rgb(0, 0, 0);">hashCode()</span></i><span style="color:rgb(0, 0, 0);"> method on each of the two objects must produce the same value.</span></div></li><li><div><span style="color:rgb(0, 0, 0);">If two objects are unequal according to the </span><b><i><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)" rev="en_rl_none"><span style="color:rgb(38, 116, 56);">equals(java.lang.Object)</span></a></i></b> method, calling the <i>hashCode</i> method on each of the two objects doesn't need to produce distinct integer results. However, developers should be aware that producing distinct integer results for unequal objects improves the performance of hash tables.</div></li></ul><div><span style="color:rgb(0, 0, 0);">“As much as is reasonably practical</span></div><div><span style="color:rgb(0, 0, 0);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(0, 0, 0);"><span style="--en-markholder:true;"><br /></span></span></div></en-note>      ]]>
    </content>
  </note>
</en-export>
