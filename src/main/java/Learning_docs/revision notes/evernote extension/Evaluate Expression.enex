<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20220122T103133Z" application="Evernote" version="10.24.3">
  <note>
    <title>Evaluate Expression</title>
    <created>20210706T005622Z</created>
    <updated>20210706T010714Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><br /></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>/* A Java program to evaluate a</div><div>given expression where tokens</div><div>are separated by space.</div><div>*/</div><div>import java.util.Stack;</div><div></div><div>public class EvaluateString</div><div>{</div><div>	public static int evaluate(String expression)</div><div>	{</div><div>		char[] tokens = expression.toCharArray();</div><div></div><div>		// Stack for numbers: 'values'</div><div>		Stack&lt;Integer&gt; values = new  Stack&lt;Integer&gt;(); </div><div></div><div>		// Stack for Operators: 'ops'</div><div>		Stack&lt;Character&gt; ops = new Stack&lt;Character&gt;(); </div><div></div><div>		for (int i = 0; i &lt; tokens.length; i++)</div><div>		{</div><div>			</div><div>			// Current token is a</div><div>			// whitespace, skip it</div><div>			if (tokens[i] == ' ')</div><div>				continue;</div><div></div><div>			// Current token is a number,</div><div>			// push it to stack for numbers</div><div>			if (Character.isDigit(tokens[i])) </div><div>			{</div><div>				StringBuffer sbuf = new</div><div>							StringBuffer();</div><div>				</div><div>				// There may be more than one</div><div>				// digits in number</div><div>				while (i &lt; tokens.length &amp;&amp;  Character.isDigit(tokens[i]) </div><div>					sbuf.append(tokens[i++]);</div><div>				values.push(Integer.parseInt(sbuf.toString()));</div><div>			</div><div>				// right now the i points to</div><div>				// the character next to the digit,</div><div>				// since the for loop also increases</div><div>				// the i, we would skip one</div><div>				// token position; we need to</div><div>				// decrease the value of i by 1 to</div><div>				// correct the offset.</div><div>				i--;</div><div>			}</div><div></div><div>			// Current token is an opening brace,</div><div>			// push it to 'ops'</div><div>			else if (tokens[i] == '(')</div><div>				ops.push(tokens[i]);</div><div></div><div>			// Closing brace encountered,</div><div>			// solve entire brace</div><div>			else if (tokens[i] == ')')</div><div>			{</div><div>				while (ops.peek() != '(')</div><div>				values.push(applyOp(ops.pop(),values.pop(),values.pop()));</div><div>				ops.pop();</div><div>			}</div><div></div><div>			// Current token is an operator.</div><div>			else if (tokens[i] == '+' ||</div><div>					tokens[i] == '-' ||</div><div>					tokens[i] == '*' ||</div><div>						tokens[i] == '/')</div><div>			{</div><div>				// While top of 'ops' has same</div><div>				// or greater precedence to current</div><div>				// token, which is an operator.</div><div>				// Apply operator on top of 'ops'</div><div>				// to top two elements in values stack</div><div>				while (!ops.empty() &amp;&amp;</div><div>					hasPrecedence(tokens[i],</div><div>									ops.peek()))</div><div>				values.push(applyOp(ops.pop(),</div><div>								values.pop(),</div><div>								values.pop()));</div><div></div><div>				// Push current token to 'ops'.</div><div>				ops.push(tokens[i]);</div><div>			}</div><div>		}</div><div></div><div>		// Entire expression has been</div><div>		// parsed at this point, apply remaining</div><div>		// ops to remaining values</div><div>		while (!ops.empty())</div><div>			values.push(applyOp(ops.pop(),</div><div>							values.pop(),</div><div>						values.pop()));</div><div></div><div>		// Top of 'values' contains</div><div>		// result, return it</div><div>		return values.pop();</div><div>	}</div><div></div><div>	// Returns true if 'op2' has higher</div><div>	// or same precedence as 'op1',</div><div>	// otherwise returns false.</div><div>	public static boolean hasPrecedence(char op1, char op2)</div><div>	{</div><div>		if (op2 == '(' || op2 == ')')</div><div>			return false;</div><div>		if ((op1 == '*' || op1 == '/') &amp;&amp;</div><div>			(op2 == '+' || op2 == '-'))</div><div>			return false;</div><div>		else</div><div>			return true;</div><div>	}</div><div></div><div>	// A utility method to apply an</div><div>	// operator 'op' on operands 'a'</div><div>	// and 'b'. Return the result.</div><div>	public static int applyOp(char op,</div><div>						int b, int a)</div><div>	{</div><div>		switch (op)</div><div>		{</div><div>		case '+':</div><div>			return a + b;</div><div>		case '-':</div><div>			return a - b;</div><div>		case '*':</div><div>			return a * b;</div><div>		case '/':</div><div>			if (b == 0)</div><div>				throw new</div><div>				UnsupportedOperationException(</div><div>					"Cannot divide by zero");</div><div>			return a / b;</div><div>		}</div><div>		return 0;</div><div>	}</div><div></div><div>	// Driver method to test above methods</div><div>	public static void main(String[] args)</div><div>	{</div><div>		System.out.println(EvaluateString.</div><div>						evaluate("10 + 2 * 6"));</div><div>		System.out.println(EvaluateString.</div><div>					evaluate("100 * 2 + 12"));</div><div>		System.out.println(EvaluateString.</div><div>				evaluate("100 * ( 2 + 12 )"));</div><div>		System.out.println(EvaluateString.</div><div>			evaluate("100 * ( 2 + 12 ) / 14"));</div><div>	}</div><div>}</div></div><div><br /></div></en-note>      ]]>
    </content>
  </note>
</en-export>
