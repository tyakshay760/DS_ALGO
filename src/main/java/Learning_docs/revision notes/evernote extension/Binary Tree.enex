<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20220122T102927Z" application="Evernote" version="10.24.3">
  <note>
    <title>Binary Tree</title>
    <created>20210709T111438Z</created>
    <updated>20210722T154946Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><h2><span style="color:rgb(229, 158, 37);">1</span>. <b><span style="color:rgb(229, 158, 37);">size, max, height</span></b></h2><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>class TreeNode{</div><div> int val;</div><div> int left;</div><div> int right;</div><div>  </div><div> public TreeNode(int val){</div><div>   this.val= val;</div><div>   this.left = this.right = null; </div><div> }</div><div><br /></div><div> public TreeNode(int val, TreeNode left, TreeNode right){ </div><div>   this.val= val; </div><div>   this.left = left;</div><div>    this.right = right;  </div><div> }</div><div><br /></div><div>}</div><div><br /></div><div><br /></div><div>public class TreeOP{</div><div><br /></div><div>  public int size(TreeNode node){</div><div>    if(node == null)</div><div>       return 0; // sum identity 0, product identity 1</div><div>    int lsz = size(node.left);</div><div>    int rsz = size(node.right);</div><div>     return lsz + rsz + 1;</div><div>  }</div><div><br /></div><div> public int sum(TreeNode node){ </div><div>    if(node == null) </div><div>       return 0; // sum identity 0, product identity 1 </div><div>    int lsm = sum(node.left); </div><div>    int rsm = sum(node.right); </div><div>     return lsm + rsm + node.data; </div><div>  }</div><div>  public int max(TreeNode node){ </div><div>   if(node == null) </div><div>       return Integer.MIN_VALUE; // </div><div>    int lm = max(node.left); </div><div>    int rm = max(node.right); </div><div>     return Math.max(node.data, Math.max(lm,rm));</div><div>  }</div><div><br /></div><div>  public int height(TreeNode node){</div><div>   if(node == null){</div><div>     return 0; // 0 for node based height, -1 for edge based height </div><div>    }</div><div>    int lh = heigth(node.left);</div><div>    int rh = height(node.right);</div><div>    return Math.max(lh,rh) + 1;</div><div>  }</div><div><br /></div><div><br /></div><div><br /></div><div>}</div></div><div><br /></div><h2><span style="color:rgb(229, 158, 37);"> 2. Level Order Traversal</span></h2><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>&lt;-- Interative approach --&gt; </div><div>public class LevelOrder{ </div><div> List&lt;List&lt;Integer&gt;&gt; response = new ArrayList&lt;&gt;(); </div><div> public List&lt;List&lt;Integer&gt;&gt; levelOrderTraversal(TreeNode node){</div><div>   if(node == null)</div><div>     return response;</div><div>    Queue&lt;TreeNode&gt; queue = new ArrayDeque&lt;&gt;();</div><div>    queue.add(node);</div><div>    while(queue.size() &gt; 0){</div><div>     int size = queue.size();</div><div>    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();  </div><div>    for(int i 0 ; i &lt; size ; i++){</div><div>       TreeNode currNode = queue.remove();</div><div>       list.add(currNode.val);</div><div>       if(currNode.left != null){</div><div>         queue.add(currNode.left);</div><div>       }   </div><div>       </div><div>       if(currNode.right != null){</div><div>         queue.add(currNode.right);</div><div>       }</div><div>     }</div><div>   }</div><div>  return response;</div><div> }</div><div>}</div><div><br /></div><div>&lt;-- recursive approach --&gt;</div><div><br /></div></div><div><br /></div><div>3.   Zigzag level order traversal: </div><div>      Though process : </div><div>       In level order traversal we just need to print all the nodes data in same direction i.e left to right. so we can use just one queue, then use technique of RPA (Remove, Print, Add) . </div><div>     but in ZigZag level order traversal, order will be first left to right then right to left. </div><div>     we can add  child element in stack while processing root element, and while processing child element, we will get elements in reverse order at stack is LIFO. </div><div>   use one flag to keep track of ordering of traversal i.e either leftToRight or vice-versa. </div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>class Solution { </div><div>    List&lt;List&lt;Integer&gt;&gt; response = new ArrayList&lt;&gt;(); </div><div>    </div><div>    public List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) { </div><div>        if(root == null){ </div><div>            return response; </div><div>        } </div><div>        boolean leftToRight = true; </div><div>        Stack&lt;TreeNode&gt; ms = new Stack&lt;&gt;(); </div><div>        ms.push(root); </div><div>        Stack&lt;TreeNode&gt; cs = new Stack&lt;&gt;(); </div><div>        while(ms.size() &gt; 0){ </div><div>            int size = ms.size(); </div><div>            List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); </div><div>            for(int i=0; i&lt;size ; i++){ </div><div>            TreeNode node = ms.pop(); </div><div>            list.add(node.val); </div><div>            if(leftToRight){ </div><div>                if(node.left != null){ </div><div>                    cs.push(node.left); </div><div>                } </div><div>                if(node.right != null){ </div><div>                   cs.push(node.right); </div><div>                } </div><div>                     </div><div>            }else{ </div><div>                 if(node.right != null){ </div><div>                   cs.push(node.right); </div><div>                } </div><div>                    </div><div>                  if(node.left != null){ </div><div>                    cs.push(node.left); </div><div>                }    </div><div>            } </div><div>            if(ms.size() == 0){ </div><div>                leftToRight = !leftToRight; </div><div>                ms = cs; </div><div>                cs = new Stack&lt;&gt;(); </div><div>            } </div><div>        } </div><div>            response.add(list);</div><div>        }  </div><div>        return response; </div><div>    } </div><div>}</div><div><br /></div><div><br /></div><div>&lt;-- Double ended queue i.e Dque approach</div><div><br /></div><div>public List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) { </div><div>        List&lt;List&lt;Integer&gt;&gt; rtn = new ArrayList&lt;&gt;(); </div><div>        if (root == null) return rtn; </div><div>         </div><div>        Deque&lt;TreeNode&gt; queue = new ArrayDeque&lt;&gt;(); </div><div>        queue.offer(root); </div><div>        boolean reverse = false; </div><div>        while(!queue.isEmpty()) { </div><div>            List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); </div><div>            for(int i = queue.size() - 1 ; i &gt;= 0; i--) { </div><div>                TreeNode node = queue.poll(); </div><div>                list.add(node.val); </div><div>                if(node.left != null) queue.offer(node.left); </div><div>                if(node.right != null) queue.offer(node.right); </div><div>            } </div><div>            if(reverse) Collections.reverse(list);  </div><div>            rtn.add(list); </div><div>            reverse = !reverse; </div><div>        } </div><div>        return rtn; </div><div>    }</div></div><div>         </div></en-note>      ]]>
    </content>
  </note>
  <note>
    <title>LCA of Binary tree</title>
    <created>20210722T154959Z</created>
    <updated>20210722T155420Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><span style="color:rgb(39, 50, 57);">The idea is to traverse the tree starting from the root. If any of the given keys (n1 and n2) matches with the root, then the root is LCA (assuming that both keys are present). If the root doesn’t match with any of the keys, we recur for the left and right subtree. The node which has one key present in its left subtree and the other key present in the right subtree is the LCA. If both keys lie in the left subtree, then the left subtree has LCA also, otherwise, LCA lies in the right subtree.  </span></div><div><span style="color:rgb(39, 50, 57);"><span style="--en-markholder:true;"><br /></span></span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>    </div><div>/**</div><div> * Definition for a binary tree node.</div><div> * public class TreeNode {</div><div> *     int val;</div><div> *     TreeNode left;</div><div> *     TreeNode right;</div><div> *     TreeNode(int x) { val = x; }</div><div> * }</div><div> */</div><div>class Solution {</div><div>    boolean v1,v2;</div><div>    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {</div><div>        v1 = false; v2= false;</div><div>        TreeNode node = findLCA(root, p.val,q.val);</div><div>        if(v1 &amp;&amp; v2) return node;</div><div>        return null;</div><div>    }</div><div>    </div><div>    public TreeNode findLCA(TreeNode root, int n1, int n2){</div><div>        if(root == null) return null;</div><div>        </div><div>        TreeNode temp = null;</div><div>        </div><div>        if(root.val == n1){</div><div>            v1 = true;</div><div>            temp = root;</div><div>        }</div><div>        if(root.val == n2){</div><div>            v2 = true;</div><div>            temp= root;</div><div>        }</div><div>        </div><div>        TreeNode left_lca = findLCA(root.left, n1,n2);</div><div>        TreeNode right_lca = findLCA(root.right, n1,n2);</div><div>        </div><div>        if(temp != null){</div><div>            return temp;</div><div>        }</div><div>        </div><div>        if(left_lca != null &amp;&amp; right_lca != null){</div><div>            return root;</div><div>        }</div><div>        </div><div>        return left_lca != null ? left_lca: right_lca;</div><div>    }</div><div>}</div></div><div><br /></div></en-note>      ]]>
    </content>
  </note>
  <note>
    <title>Unique No of BST</title>
    <created>20210704T112359Z</created>
    <updated>20210704T115053Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>Question:</div><div>Given a number, find how many binary search tree possible: </div><div>Explanation:</div><table width="931px" style="width:931px;border-collapse:collapse;"><colgroup><col style="width: 190px;" /><col style="width: 190px;" /><col style="width: 263px;" /><col style="width: 288px;" /></colgroup><tbody><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><b> No of nodes</b></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><b>possible Binary Tree count </b></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>  function to represent </div><div>  number of unique binary tree</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>    0</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>1</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>f(0) = 1</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div> Empty Binary tree</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>  1 </div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>1</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>f(1) = 1</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div> one tree with root node </div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div> 2</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>2</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div><div><br /></div><div>f(2) = f(0) * f(1) + f(1) * f(0)</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>exam: [10, 20 ]</div><div> 10            or       20</div><div>    \                    / </div><div>      20          10</div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>3</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><span style="color:rgb(51, 51, 51);">5</span></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);">f(3) = f(0) * f(2) + f(1) * f(1)+ f(2) * f(0)</span></div><div><span style="color:rgb(51, 51, 51);">f(3) = 1*2 + 1*1 + 2*1 = 5 </span></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>exam: [1,2,3]</div><en-media style="--en-naturalWidth:473; --en-naturalHeight:382;" alt="Total number of possible Binary Search Trees with &amp;#39;n&amp;#39; keys - IDeserve" height="349.696px" width="433px" hash="05e8acb97b9bf287e7c74584288645d3" type="image/gif" /><div><br /></div></td></tr><tr><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div>4</div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><span style="color:rgb(51, 51, 51);"> 14 </span></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><span style="color:rgb(51, 51, 51);">f(4) =  f(0) * f(3) + f(1) * f(2)+ f(2) * f(1) + f(3)* f(0) </span></div><div><span style="color:rgb(51, 51, 51);">f(4) =  1*5 + 1*2 + 2*1 + 5*1</span></div><div><span style="color:rgb(51, 51, 51);">       = 14</span></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);">Note : This pattern is called '</span><b><span style="color:rgb(51, 51, 51);">CATALAN NUNBER</span></b><span style="color:rgb(51, 51, 51);">'.</span></div></td><td style="border-color:#ccc;border-width:1px;border-style:solid;padding:10px;"><div><br /></div><div><br /></div><div><br /></div><en-media style="--en-naturalWidth:303; --en-naturalHeight:328;" alt="How many binary tree can be form with 4 nodes? - Quora" height="321px" width="296.534px" hash="bf039412b57c640f7e39affecdac0fe9" type="image/png" /></td></tr></tbody></table><div><b><span style="color:rgb(229, 158, 37);">Formula : </span></b></div><div><b><span style="color:rgb(229, 158, 37);"> </span><span style="color:rgb(87, 36, 194);">C(n+1) = ( 2(2*n +1)/(n+1) ) * Cn</span></b></div><div><br /></div><div>Code Block</div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>class Solution { </div><div>    public int numTrees(int n) { </div><div>        int[] dp = new int[n+1]; </div><div>        dp[0] = 1; </div><div>        dp[1] = 1; </div><div>         </div><div>        for(int i=2; i &lt;= n; i++){ </div><div>            int l = 0, r = i-1; </div><div>            while(l &lt;= i-1){ </div><div>                dp[i] += dp[l]* dp[r]; </div><div>                l++; </div><div>                r--; </div><div>            }   </div><div>        } </div><div>        return dp[n]; </div><div>    } </div><div>}</div><div>Time complexity: O(n2)</div><div>Space complexity : O(n)</div><div><br /></div><div>// Alternative solution</div><div>using direct formula:</div><div><br /></div><div>class Solution { </div><div>    </div><div>public int numTrees(int n) {</div><div>    long c = 1;  </div><div>    for(int i=0; i &lt; n; ++i){ </div><div>       c = c* 2 * (2*i + 1)/ (i+2);</div><div>    } </div><div>  return (int)c;</div><div> }</div><div>Time complexity: O(n) </div><div>Space complexity : O(1)</div></div><div><br /></div></en-note>      ]]>
    </content>
    <resource>
      <data encoding="base64">
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
      </data>
      <mime>image/gif</mime>
      <width>473</width>
      <height>382</height>
      <resource-attributes>
        <file-name>allBSTs_0.gif</file-name>
        <source-url>en-cache://tokenKey%3D%22AuthToken%3AUser%3A227501938%22+790a6aab-b140-cb5f-56cc-71368dfabb01+05e8acb97b9bf287e7c74584288645d3+https://www.evernote.com/shard/s446/res/0e5898e5-7670-2dfe-2fa7-612e2b645004</source-url>
      </resource-attributes>
    </resource>
    <resource>
      <data encoding="base64">
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
      </data>
      <mime>image/png</mime>
      <width>303</width>
      <height>328</height>
      <resource-attributes>
        <file-name>main-qimg-bf039412b57c640f7e39affecdac0fe9</file-name>
        <source-url>en-cache://tokenKey%3D%22AuthToken%3AUser%3A227501938%22+790a6aab-b140-cb5f-56cc-71368dfabb01+bf039412b57c640f7e39affecdac0fe9+https://www.evernote.com/shard/s446/res/00b8dce0-f9cd-18ae-3ab9-acc06bde952a</source-url>
      </resource-attributes>
    </resource>
  </note>
</en-export>
