<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20220122T103002Z" application="Evernote" version="10.24.3">
  <note>
    <title>Singleton</title>
    <created>20210727T063226Z</created>
    <updated>20210727T064820Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>Design patterns cheet sheet: </div><div><br /></div><div>1. Singleton : </div><div>   allows only one obeject or single instance of class. </div><div>   Every Bean in spring is singleton. </div><div>   ways to create singleton.</div><div>   1. Eager Initialization Method : </div><div>     </div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>  public class SingletonClass {</div><div>	private static final SingletonClass SINGLE_INSTANCE = new SingletonClass();</div><div>        private SingletonClass() {}</div><div>	public static SingletonClass getInstance() {</div><div>           return SINGLE_INSTANCE;</div><div>        }</div><div>       }</div></div><div><br /></div><div>    2. Lazy Initialization Method</div><div>      </div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public class SingletonClass {</div><div>	 private static SingletonClass SINGLE_INSTANCE = null;</div><div>		  </div><div>	private SingletonClass() {}</div><div>		  </div><div>	public static SingletonClass getInstance() {</div><div>	  if (SINGLE_INSTANCE == null) {  </div><div>	     synchronized(SingletonClass.class) {</div><div>		  SINGLE_INSTANCE = new SingletonClass();</div><div>	     }</div><div>          }</div><div>         return SINGLE_INSTANCE;</div><div>      }</div><div>    }</div></div><div><br /></div><ol start="3"><li><div><b><span style="color:rgb(34, 38, 53);">Lazy Initialization with double lock Method</span></b></div></li></ol><div><b><span style="color:rgb(34, 38, 53);"> </span></b></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public class SingletonClass {</div><div>    private static SingletonClass SINGLE_INSTANCE = null;</div><div>    private SingletonClass() {}</div><div>    public static SingletonClass getInstance() {</div><div>        if (SINGLE_INSTANCE == null) {</div><div>            synchronized (SingletonClass.class) {</div><div>                if (SINGLE_INSTANCE == null) {</div><div>                    SINGLE_INSTANCE = new SingletonClass();</div><div>                }</div><div>            }</div><div>        }</div><div>        return SINGLE_INSTANCE;</div><div>    }</div><div>}</div></div><div><br /></div><div>   4.  <b><span style="color:rgb(34, 38, 53);">By using nested Inner class (Lazy Load method):</span></b></div><div><br /></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public class SingletonClass {</div><div>    private SingletonClass() {}</div><div>    private static class SingletonClassHolder {</div><div>        static final Something SINGLE_INSTANCE = new SingletonClass();</div><div>    }</div><div>    public static SingletonClass getInstance() {</div><div>        return SingletonClassHolder.SINGLE_INSTANCE;</div><div>    }</div><div>}</div></div><div><br /></div><div><br /></div><div><b>Way to break singleton: </b></div><ol><li><div><b>Reflection : </b></div></li></ol><div><b>           </b></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>Singleton instance1 = Singleton.instance;</div><div>        Singleton instance2 = null;</div><div>        try</div><div>        {</div><div>            Constructor[] constructors =</div><div>                    Singleton.class.getDeclaredConstructors();</div><div>            for (Constructor constructor : constructors)</div><div>            {</div><div>                // Below code will destroy the singleton pattern</div><div>                constructor.setAccessible(true);</div><div>                instance2 = (Singleton) constructor.newInstance();</div><div>                break;</div><div>            }</div><div>        }</div></div><div> </div><div>solution : </div><ol><li><div><span style="color:rgb(34, 38, 53);">There are many ways to prevent Singleton pattern from Reflection API, but one of the best solutions is to throw a run-time exception in the constructor if the instance already exists. In this, we can not able to create a second instance.</span></div></li></ol><div><span style="color:rgb(34, 38, 53);"><span style="--en-markholder:true;"><br /></span></span></div><div><b><span style="color:rgb(34, 38, 53);">Serialization: </span></b></div><div><b><span style="color:rgb(34, 38, 53);"><span style="--en-markholder:true;"><br /></span></span></b></div><div> </div></en-note>      ]]>
    </content>
  </note>
</en-export>
