<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20220122T103208Z" application="Evernote" version="10.24.3">
  <note>
    <title>Infix Evaludation</title>
    <created>20210930T060706Z</created>
    <updated>20210930T060820Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>Problem : <a href="https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/infix-evaluation-official/ojquestion">https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/infix-evaluation-official/ojquestion</a></div><div><br /></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>1. You are given an infix expression.</div><div>2. You are required to evaluate and print it's value.</div><div><br /></div><div>Constraints</div><div>1. Expression is balanced</div><div>2. The only operators used are +, -, *, /</div><div>3. Opening and closing brackets - () - are used to impact precedence of operations</div><div>4. + and - have equal precedence which is less than * and /. * and / also have equal precedence.</div><div>5. In two operators of equal precedence give preference to the one on left.</div><div>6. All operands are single digit numbers.</div><div><br /></div><div>Sample Input : </div><div>2 + 6 * 4 / 8 - 3</div><div><br /></div><div>Sample Output : </div><div>2</div></div><div><br /></div><div><br /></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>import java.io.*;</div><div>import java.util.*;</div><div></div><div>public class Main {</div><div></div><div></div><div>  public static void main(String[] args) throws Exception {</div><div>    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</div><div>    String exp = br.readLine();</div><div>    System.out.println(eval(exp));</div><div>  }</div><div></div><div>  public static int eval(String exp) {</div><div>    Stack&lt;Integer&gt; oprand = new Stack&lt;&gt;();</div><div>    Stack&lt;Character&gt; oprator = new Stack&lt;&gt;();</div><div>    for (char c : exp.toCharArray()) {</div><div>      if (c == '(') {</div><div>        oprator.push(c);</div><div>      } else if (Character.isDigit(c)) {</div><div>        int no = c - '0';</div><div>        oprand.push(no);</div><div>      } else if (c == ')') {</div><div>        while (oprator.peek() != '(') {</div><div>          char op = oprator.pop();</div><div>          int val2 = oprand.pop();</div><div>          int val1 = oprand.pop();</div><div></div><div>          int res = opration(val1, val2, op);</div><div>          oprand.push(res);</div><div>        }</div><div>        oprator.pop();</div><div></div><div>      } else if (c == '+' || c == '-' || c == '*' || c == '/') {</div><div>        // check precedence and perform opration if oprator stack has high precendence operator on top of the stack</div><div>        while (oprator.size() &gt; 0 &amp;&amp; oprator.peek() != '(' &amp;&amp; precedence(c) &lt;= precedence(oprator.peek())) {</div><div>          char op = oprator.pop();</div><div>          int val2 = oprand.pop();</div><div>          int val1 = oprand.pop();</div><div>          int res = opration(val1, val2, op);</div><div>          oprand.push(res);</div><div>        }</div><div>        oprator.push(c);</div><div>      }</div><div></div><div>    }</div><div>    while (oprator.size() &gt; 0) {</div><div>      char op = oprator.pop();</div><div>      int val2 = oprand.pop();</div><div>      int val1 = oprand.pop();</div><div>      int res = opration(val1, val2, op);</div><div>      oprand.push(res);</div><div>    }</div><div>    return oprand.peek();</div><div>  }</div><div></div><div>  public static int precedence(char c) {</div><div>    if (c == '+' || c == '-')</div><div>      return 1;</div><div>    else if (c == '*' || c == '/') {</div><div>      return 2;</div><div>    }</div><div>    return 0;</div><div>  }</div><div></div><div></div><div>  public static int opration(int val1, int val2, char op) {</div><div>    if (op == '+') {</div><div>      return val1 + val2;</div><div>    } else if (op == '-') {</div><div>      return val1 - val2;</div><div></div><div>    } else if (op == '*') {</div><div>      return val1 * val2;</div><div>    } else if (op == '/') {</div><div>      return val1 / val2;</div><div>    }</div><div>    return 0;</div><div>  }</div><div>}</div></div><div><br /></div></en-note>      ]]>
    </content>
  </note>
  <note>
    <title>Largest Area Histogram</title>
    <created>20210928T005723Z</created>
    <updated>20210928T010848Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>Problem : <a href="https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/lah-official/ojquestion" rev="en_rl_none">https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/lah-official/ojquestion</a></div><div><br /></div><div><span style="--en-highlight:red;background-color: #fec1d0;">Variation of </span>:  <span style="color:rgb(87, 36, 194);">next Smaller on left and  left smaller on right</span></div><div><span style="color:rgb(87, 36, 194);"><span style="--en-markholder:true;"><br /></span></span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>1. You are given a number n, representing the size of array a.</div><div>2. You are given n numbers, representing the height of bars in a bar chart.</div><div>3. You are required to find and print the area of largest rectangle in the histogram.</div><div><br /></div><div>e.g.</div><div>for the array [6 2 5 4 5 1 6] -&gt; 12</div></div><div><br /></div><en-media style="--en-naturalWidth:557; --en-naturalHeight:521;" width="469px" hash="379ecf59b45478aba09ed3b753101a0c" type="image/png" /><div>  So for every bar, we need to find, how much it can extend on either side. </div><div>Exam : bar with height 4 can go one left side bar and one right side bar... because after 5 there is one so rectangle with height 4 can not be formed. </div><div>Ideally, we need to find  next smallest on left side of the bar and right side of the bar..</div><div><br /></div><div><span style="color:rgb(24, 168, 65);">Basic.: </span></div><div><span style="color:rgb(24, 168, 65);">                             L                R</span></div><div><span style="color:rgb(51, 51, 51);">given array : [1,2,3,4,5,6]</span></div><div><span style="color:rgb(51, 51, 51);">we want to </span><b><span style="color:rgb(51, 51, 51);">include</span></b><span style="color:rgb(51, 51, 51);"> both edge element i.e 1 and 5 : (1 -- 5) : </span><span style="color:rgb(191, 191, 191);"> </span><span style="color:rgb(24, 133, 226);">R - L +1</span></div><div><span style="color:rgb(51, 51, 51);">we want to </span><b><span style="color:rgb(51, 51, 51);">include</span></b><span style="color:rgb(51, 51, 51);"> any one  edge element i.e 1 or 5 : (1 -- 5) :</span><span style="color:rgb(191, 191, 191);">  </span><span style="color:rgb(24, 133, 226);">R - L </span></div><div><span style="color:rgb(51, 51, 51);">we want to </span><b><span style="color:rgb(51, 51, 51);">exclude</span></b><span style="color:rgb(51, 51, 51);"> both edge element i.e 1 and 5 : (1 -- 5) : </span><span style="color:rgb(191, 191, 191);"> </span><span style="color:rgb(24, 133, 226);">R - L - 1</span></div><div><span style="color:rgb(24, 133, 226);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(24, 133, 226);">so width will become now : r- l -1  : </span><span style="color:rgb(51, 51, 51);"> Because we want to exclude index of next smallest</span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public void method(int[] arr) throws Exception { </div><div>        </div><div>    int[] rb = new int[n];</div><div>    Stack&lt;Integer&gt; rstk = new Stack&lt;&gt;();</div><div>    for(int i = arr.length-1; i &gt;=0 ; i--){</div><div>        // pop : we need next smllest on right side, so all element grater then current element can not become next smallest, so pop them</div><div>        while(!rstk.isEmpty() &amp;&amp; arr[i] &lt;= arr[rstk.peek()]){</div><div>            rstk.pop();</div><div>        }</div><div>        // ans: if stack is empty, then highest index value can be considered as index.</div><div>        </div><div>        if(rstk.isEmpty()){</div><div>            rb[i] = arr.length;</div><div>        }else{</div><div>            rb[i] = rstk.peek();</div><div>        }</div><div>        //push: we are storing index because it will help us in finding width of histogram.</div><div>        rstk.push(i);</div><div>        </div><div>    }</div><div>    </div><div>    int[] lb = new int[n];</div><div>    Stack&lt;Integer&gt; lstk = new Stack&lt;&gt;();</div><div>    for(int i = 0; i &lt; arr.length ; i++){</div><div>        while(!lstk.isEmpty() &amp;&amp; arr[i] &lt;= arr[lstk.peek()]){</div><div>            lstk.pop();</div><div>        }</div><div>        if(lstk.isEmpty()){</div><div>            lb[i] = -1;</div><div>        }else{</div><div>            lb[i] = lstk.peek();</div><div>        }</div><div>        lstk.push(i);</div><div>       </div><div>    }</div><div>    </div><div>    int maxAera = Integer.MIN_VALUE;</div><div>    for(int i=0; i &lt; n ; i++){</div><div>        int width = rb[i] - lb[i]-1;</div><div>        int area = width * arr[i];</div><div>        maxAera = Math.max(maxAera, area);</div><div>    }</div><div>    System.out.println(maxAera);</div><div></div><div> }</div></div><div><span style="color:rgb(24, 133, 226);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(24, 133, 226);"><span style="--en-markholder:true;"><br /></span></span></div><div><br /></div><div><br /></div></en-note>      ]]>
    </content>
    <resource>
      <data encoding="base64">
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
      </data>
      <mime>image/png</mime>
      <width>557</width>
      <height>521</height>
      <resource-attributes>
        <file-name>image.png</file-name>
        <source-url>en-cache://tokenKey%3D%22AuthToken%3AUser%3A227501938%22+d814209c-bcf1-0c72-94f5-844e4392f161+379ecf59b45478aba09ed3b753101a0c+https://www.evernote.com/shard/s446/res/d226d241-eb64-56b0-4546-d4a581cfcbdf</source-url>
      </resource-attributes>
    </resource>
  </note>
  <note>
    <title>Stack Notes</title>
    <created>20210926T033157Z</created>
    <updated>20210929T055624Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><span style="color:rgb(24, 168, 65);">Principle : LIFO (last in first out) ... </span></div><div><span style="color:rgb(24, 168, 65);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(24, 168, 65);">  When to use : </span></div><div><span style="color:rgb(24, 168, 65);">      </span><span style="color:rgb(51, 51, 51);"> 1.  It gives the out in reverse order of input so it can be used to reverse input order... </span></div><div><span style="color:rgb(51, 51, 51);">       2.  Normally to solve any Mathematical expression use stack. </span></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(24, 168, 65);">Basic.: </span></div><div><span style="color:rgb(24, 168, 65);">                             L                    R</span></div><div><b><span style="color:rgb(191, 191, 191);">given array : [1,2,3,4,5,6]</span></b></div><div><span style="color:rgb(191, 191, 191);">we want to </span><b><span style="color:rgb(191, 191, 191);">include</span></b><span style="color:rgb(191, 191, 191);"> both edge element i.e 1 and 5 : (1 -- 5) :  </span><span style="color:rgb(24, 133, 226);">R - L +1</span></div><div><span style="color:rgb(191, 191, 191);">we want to </span><b><span style="color:rgb(191, 191, 191);">include</span></b><span style="color:rgb(191, 191, 191);"> any one  edge element i.e 1 or 5 : (1 -- 5) :  </span><span style="color:rgb(24, 133, 226);">R - L </span></div><div><span style="color:rgb(191, 191, 191);">we want to </span><b><span style="color:rgb(191, 191, 191);">exclude</span></b><span style="color:rgb(191, 191, 191);"> both edge element i.e 1 and 5 : (1 -- 5) :  </span><span style="color:rgb(24, 133, 226);">R - L - 1</span></div><div><span style="color:rgb(24, 133, 226);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(24, 133, 226);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(24, 133, 226);">BODMAS Rule in maths : </span></div><div><span style="color:rgb(24, 133, 226);">In computer science: </span></div><ol><li><div><span style="color:rgb(24, 133, 226);"> * and  / has same precedence ... </span></div></li><li><div><span style="color:rgb(24, 133, 226);">  similarly + and - has same precedence. </span></div></li><li><div><span style="color:rgb(24, 133, 226);">(* , / ) has more precedence then (+, - )</span></div></li><li><div><span style="color:rgb(24, 133, 226);">In case of same precedence expression will be evaluated from left to right. exam : 5- 6 + 2 then 5-6 will evaluated first then  - 1 + 2 will be evaluated.  i.e Associativity : </span><span style="color:rgb(24, 168, 65);">LEFT -&gt; RIGHT</span></div></li><li><div><span style="color:rgb(24, 133, 226);"><span style="--en-markholder:true;"><br /></span></span></div></li></ol><div><span style="color:rgb(24, 133, 226);"> </span></div><div><span style="color:rgb(24, 133, 226);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);">Exam : </span></div><div><span style="color:rgb(51, 51, 51);">Problem : </span><a href="https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/duplicate-brackets-official/ojquestion" rev="en_rl_none"><span style="color:rgb(51, 51, 51);">https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/duplicate-brackets-official/ojquestion</span></a></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>1. You are given a string exp representing an expression.</div><div>2. Assume that the expression is balanced  i.e. the opening and closing brackets match with each other.</div><div>3. But, some of the pair of brackets maybe extra/needless. </div><div>4. You are required to print true if you detect extra brackets and false otherwise.</div><div><br /></div><div>e.g.'</div><div>((a + b) + (c + d)) -&gt; false</div><div>(a + b) + ((c + d)) -&gt; true</div></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="--en-highlight:green;background-color: #b7f7d1;"><span style="color:rgb(51, 51, 51);">concept : </span></span></div><ol><li><div><span style="color:rgb(229, 158, 37);">push elements one by one to the stack till we get closing bracket</span></div></li><li><div><span style="color:rgb(229, 158, 37);">Once encounter closing bracket, pop all elements till  opening braces. </span></div></li><li><div><span style="color:rgb(229, 158, 37);">If  on getting  closing braces in current character and stack  has opening braces on top to stack meaning that braces is redundant mean that braces is not required .  </span></div></li></ol><div><span style="color:rgb(229, 158, 37);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(229, 158, 37);"><span style="--en-markholder:true;"><br /></span></span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div> public static boolean hasRedendent(String str) { </div><div>    Stack&lt;Character&gt; stk = new Stack&lt;Character&gt;(); </div><div>    for (char c : str.toCharArray()) { </div><div>      if (c == ')') { </div><div>        if (stk.peek() == '(') { </div><div>          return true; </div><div>        } </div><div>        while (stk.peek() != '(') { </div><div>          stk.pop(); </div><div>        } </div><div>        stk.pop(); </div><div>      } else { </div><div>        stk.push(c); </div><div>      } </div><div>    } </div><div>    return false; </div><div>  }</div></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="color:rgb(51, 51, 51);">problem : </span><a href="https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/balanced-brackets-official/ojquestion" rev="en_rl_none"><span style="color:rgb(51, 51, 51);">https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/balanced-brackets-official/ojquestion</span></a></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>1. You are given a string exp representing an expression.</div><div>2. You are required to check if the expression is balanced i.e. closing brackets and opening brackets match up well.</div><div><br /></div><div>e.g.</div><div>[(a + b) + {(c + d) * (e / f)}] -&gt; true</div><div>[(a + b) + {(c + d) * (e / f)]} -&gt; false</div><div>[(a + b) + {(c + d) * (e / f)} -&gt; false</div><div>([(a + b) + {(c + d) * (e / f)}] -&gt; false</div></div><div><span style="color:rgb(51, 51, 51);"><span style="--en-markholder:true;"><br /></span></span></div><div><span style="--en-highlight:green;background-color: #b7f7d1;">concept: </span></div><div>    - <span style="color:rgb(26, 169, 178);">we just need to check parenthesis, not character</span></div><div><span style="color:rgb(26, 169, 178);">    - store parenthesis to stack if it is open braces </span></div><div><span style="color:rgb(26, 169, 178);">    - if it is closing parenthesis, then check if</span></div><div><span style="color:rgb(26, 169, 178);">      stack is empty means we have extra closing braces</span></div><div><span style="color:rgb(26, 169, 178);">      stack do not have pairing open parenthesis then return false</span></div><div><span style="color:rgb(26, 169, 178);">      else if pop out matching parenthesis from stack</span></div><div><span style="color:rgb(26, 169, 178);">    - at last if stack has any braces in it means that is extra braces/parenthesis </span></div><div><span style="color:rgb(26, 169, 178);">      so return false</span></div><div><span style="color:rgb(26, 169, 178);"><span style="--en-markholder:true;"><br /></span></span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div><br /></div><div>  public static boolean isBalanced(String str) { </div><div>    Stack&lt;Character&gt; stk = new Stack&lt;&gt;(); </div><div>    for (int i = 0; i &lt; str.length(); i++) { </div><div>      char c = str.charAt(i); </div><div>      if (c == '(' || c == '{' || c == '[') { </div><div>        stk.push(c); </div><div>      } else if (c == ')') { </div><div>        if (stk.isEmpty() == true || stk.peek() != '(') </div><div>        { </div><div>          return false; </div><div>        } </div><div>        stk.pop(); </div><div>      } else if (c == '}') { </div><div>        if (stk.isEmpty() == true || stk.peek() != '{') { </div><div>          return false; </div><div>        } </div><div>        stk.pop(); </div><div>      } else if (c == ']') { </div><div>        if (stk.isEmpty() == true || stk.peek() != '[') { </div><div>          return false; </div><div>        } </div><div>        stk.pop(); </div><div>      } </div><div>    } </div><div>    if (stk.size() &gt; 0) { </div><div>      return false; </div><div>    } </div><div>    return true; </div><div>  }</div></div><div><br /></div><div><br /></div><div><br /></div><div><span style="--en-highlight:green;background-color: #b7f7d1;">Problem : </span>  <a href="https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/next-greater-element-official/ojquestion" rev="en_rl_none">https://classroom.pepcoding.com/myClassroom/the-switch-program-4/stack-&amp;-queue/next-greater-element-official/ojquestion</a></div><div><br /></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>1. You are given a number n, representing the size of array a.</div><div>2. You are given n numbers, representing elements of array a.</div><div>3. You are required to "next greater element on the right" for all elements of array</div><div>4. Input and output is handled for you.</div><div><br /></div><div>"Next greater element on the right" of an element x is defined as the first element to right of x having value greater than x.</div><div>Note -&gt; If an element does not have any element on it's right side greater than it, consider -1 as it's "next greater element on right"</div><div>e.g.</div><div>for the array [2 5 9 3 1 12 6 8 7]</div><div>Next greater for 2 is 5</div><div>Next greater for 5 is 9</div><div>Next greater for 9 is 12</div><div>Next greater for 3 is 12</div><div>Next greater for 1 is 12</div><div>Next greater for 12 is -1</div><div>Next greater for 6 is 8</div><div>Next greater for 8 is -1</div><div>Next greater for 7 is -1</div></div><div><br /></div><div>/*</div><div><span style="color:rgb(24, 168, 65);">concept</span> : <span style="color:rgb(229, 158, 37);">pop -&gt; answer -&gt; push</span></div><div><span style="color:rgb(24, 168, 65);">pop</span> : pop all the small element comapred with current element. because for all remaning value current will become next grater element. element after the current element which are small, can not be next grater of any other element which are before current element in given array (traversing array from right most end).</div><div><span style="color:rgb(24, 168, 65);">ans</span> : top of the stack will form answer, because top of stack will have next grater on top.</div><div><span style="color:rgb(24, 168, 65);">push</span> : pushing current element to the stack because current element can become next grater of any other element.</div><div>*/</div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>  public static int[] solve(int[] arr) {</div><div>    int[] res = new int[arr.length];</div><div>    Stack&lt;Integer&gt; stk = new Stack&lt;&gt;();</div><div>    for (int i = arr.length-1; i &gt;= 0; i--) {</div><div>        while(!stk.isEmpty() &amp;&amp; stk.peek() &lt; arr[i]){</div><div>            stk.pop();</div><div>        }</div><div>        if(stk.isEmpty()){</div><div>            res[i] = -1;</div><div>        }else{</div><div>            res[i] = stk.peek();</div><div>        }</div><div>        </div><div>        stk.push(arr[i]);</div><div>    }</div><div>    return res;</div><div>  }</div></div><div><br /></div></en-note>      ]]>
    </content>
  </note>
  <note>
    <title>Valid Parenthesis</title>
    <created>20210716T111017Z</created>
    <updated>20210716T111227Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><span style="font-size: 14px;">problem : <span style="color:rgb(38, 50, 56);">Given a string </span><span style="color:rgb(84, 110, 122);">s</span> containing just the characters <span style="color:rgb(84, 110, 122);">'('</span>, <span style="color:rgb(84, 110, 122);">')'</span>, <span style="color:rgb(84, 110, 122);">'{'</span>, <span style="color:rgb(84, 110, 122);">'}'</span>, <span style="color:rgb(84, 110, 122);">'['</span> and <span style="color:rgb(84, 110, 122);">']'</span>, determine if the input string is valid.  <span style="color:rgb(38, 50, 56);">An input string is valid if:</span></span></div><ol><li><div><span style="font-size: 14px;"><span style="color:rgb(38, 50, 56);">Open brackets must be closed by the same type of brackets.</span></span></div></li><li><div><span style="font-size: 14px;"><span style="color:rgb(38, 50, 56);">Open brackets must be closed in the correct order.</span></span></div></li></ol><div><span style="font-size: 14px;"><span style="color:rgb(38, 50, 56);"><span style="--en-markholder:true;"><br /></span></span></span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div><br /></div><div><br /></div><div>public boolean isValid(String s) {</div><div>	Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;();</div><div>	for (char c : s.toCharArray()) {</div><div>		if (c == '(')</div><div>			stack.push(')');</div><div>		else if (c == '{')</div><div>			stack.push('}');</div><div>		else if (c == '[')</div><div>			stack.push(']');</div><div>		else if (stack.isEmpty() || stack.pop() != c)</div><div>			return false;</div><div>	}</div><div>	return stack.isEmpty();</div><div>}</div></div><div><br /></div></en-note>      ]]>
    </content>
  </note>
</en-export>
