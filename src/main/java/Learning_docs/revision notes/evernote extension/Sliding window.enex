<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20220122T103152Z" application="Evernote" version="10.24.3">
  <note>
    <title>Longest substring with At most k distinct Element</title>
    <created>20210705T124201Z</created>
    <updated>20210705T124543Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><br /></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>class Solution {</div><div>    public int lengthOfLongestSubstringTwoDistinct(String s) {</div><div>     Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();</div><div>    c   int k = 2; </div><div>        int left = 0;</div><div>        int best = 0;</div><div>        int right = 0;</div><div>    while(right &lt; s.length()) {</div><div>        // character at the right pointer</div><div>        char c = s.charAt(right);</div><div>        map.put(c, map.getOrDefault(c, 0) + 1);</div><div>        // make sure map size is valid, no need to check left pointer less than s.length()</div><div>        while (map.size() &gt; k) {</div><div>            char leftChar = s.charAt(left);</div><div>            map.put(leftChar, map.get(leftChar) - 1);                     </div><div>            if (map.get(leftChar) == 0) { </div><div>                map.remove(leftChar);</div><div>            }</div><div>            left++;</div><div>        }</div><div>        best = Math.max(best, right - left + 1);</div><div>        right++;</div><div>    }</div><div>    return best;</div><div>    }</div><div>}</div></div><div><br /></div></en-note>      ]]>
    </content>
  </note>
  <note>
    <title>Longest substring without repeating character</title>
    <created>20210705T062132Z</created>
    <updated>20210705T124138Z</updated>
    <note-attributes>
      <author>Akshay Yadav</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div style="display:none;--en-chs:&quot;eyJwIjp7ImZvbnRGYW1pbHkiOiJzYW5zLXNlcmlmIiwiY29sb3IiOiJyZ2IoNjYsIDY2LCA2NikiLCJmb250V2VpZ2h0IjoiNDAwIiwiZm9udFN0eWxlIjoibm9ybWFsIiwidGV4dERlY29yYXRpb24iOiJub25lIHNvbGlkIHJnYig2NiwgNjYsIDY2KSJ9fQ==&quot;"> </div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;">refer : <a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/solution/">https://leetcode.com/problems/longest-substring-without-repeating-characters/solution/</a></span></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;">  1.  Naive approach</span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public class Solution {</div><div>    public int lengthOfLongestSubstring(String s) {</div><div>        int n = s.length();</div><div></div><div>        int res = 0;</div><div>        for (int i = 0; i &lt; n; i++) {</div><div>            for (int j = i; j &lt; n; j++) {</div><div>                if (checkRepetition(s, i, j)) {</div><div>                    res = Math.max(res, j - i + 1);</div><div>                }</div><div>            }</div><div>        }</div><div></div><div>        return res;</div><div>    }</div><div></div><div>    private boolean checkRepetition(String s, int start, int end) {</div><div>        int[] chars = new int[128];</div><div></div><div>        for (int i = start; i &lt;= end; i++) {</div><div>            char c = s.charAt(i);</div><div>            chars[c]++;</div><div>            if (chars[c] &gt; 1) {</div><div>                return false;</div><div>            }</div><div>        }</div><div></div><div>        return true;</div><div>    }</div><div>}</div></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><ol start="2"><li><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;">Sliding window:</span></div></li></ol><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;">         </span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public int lengthOfLongestSubstring(String s) {</div><div>       int[] chars = new int[128];</div><div>       int left =0, right = 0, res = 0;</div><div>        while(right &lt; s.length()){ </div><div>            char r = s.charAt(right);</div><div>            chars[r]++;</div><div>            </div><div>            while(chars[r] &gt; 1){</div><div>                char l = s.charAt(left);</div><div>                chars[l]--;</div><div>                left++;</div><div>            }</div><div>            </div><div>            res = Math.max(res, right-left + 1);</div><div>            right++;</div><div>        }</div><div>        return res;</div><div>    }</div></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><ol start="3"><li><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><span style="--en-highlight:green;background-color: #b7f7d1;">Sliding window modified</span></span></div></li></ol><div style="padding-left:80px;"><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><span style="font-size: 14px;">The idea is use a hash set to track the longest substring without repeating characters so far, use a fast pointer j to see if character j is in the hash set or not, if not, great, add it to the hash set, move j forward and update the max length, otherwise, delete from the head by using a slow pointer i until we can put character j to the hash set.</span></span></div><div style="padding-left:80px;"><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><span style="font-size: 14px;"><span style="--en-markholder:true;"><br /></span></span></span></div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>    public int lengthOfLongestSubstring(String s) {</div><div>        int i = 0, j = 0, max = 0;</div><div>        Set&lt;Character&gt; set = new HashSet&lt;&gt;();</div><div>        while (j &lt; s.length()) {</div><div>            if (!set.contains(s.charAt(j))) {</div><div>                set.add(s.charAt(j));</div><div>                j++;</div><div>                max = Math.max(max, set.size());</div><div>            } else {</div><div>                set.remove(s.charAt(i));</div><div>                i++;</div><div>            }</div><div>        }</div><div>        return max;</div><div>    }</div></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div><div><span style="color: rgb(66, 66, 66); font-weight: 400; font-style: normal; text-decoration: none solid rgb(66, 66, 66);--en-chs: true;"><br /></span></div></en-note>      ]]>
    </content>
  </note>
</en-export>
